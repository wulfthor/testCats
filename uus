
/*********************
 * USER operations
 *********************/

/**
 * Updates or inserts (upserts) a new user record in mongodb using mongojs.
 * Probably not very RESTful as the client doesn't know if a new resource will be created.
 *
 * Returns the relative path of the updated object in the the location header.
 *
 * Usage: POST with body = {"username": email, "password": password, "role": role}
 *
 * Command line hint: curl -H "Content-Type: application/json"
 *                     --cookie "connect.sid=s%3AIzaNbY6BuBKwcZxkdKI73Mo4.S6hhH7mzJPooqfXPI4TPIdKZws3Cxq3lDYmL%2FEtqgNw"
 *                     -d '{"username":"a_user@smk.dk", "password":"a_password"}'
 *                     http://localhost:3000/user
 */
app.post('/user', function(req, res){

    if (!req.isAuthenticated()){
        res.send(401); /*unauthorised*/
        return;
    };

    /* send user details in request body rather than as url parameters to avoid
     * server logging and browser history caching */
    var username = req.body.username;
    var password = req.body.password;
    var role = req.body.role;

    if(!username || !password){
        res.send(400); /*bad request*/
        return;
    }

    /*only admin can edit others passwords*/
    if(req.user.username != username && req.user.role != "admin"){
        res.send(401); /*unauthorised*/
        return;
    };

    /*Only admin can alter role*/
    if(req.user.role != "admin"){
        role = "default";
    };

    /*setup mongo findAndModify options*/
    var options = {};
    options.query = {'username' : username};  /*query by username*/
    options.upsert = true;                    /*if query doesn't find a record then insert a new one */
    options.new = true;                       /*return the modified document (not the original)*/
    options.fields = {username: 1};           /*define fields for the returned document: just the id*/

    password = encrypt(password,  function(err, hash) {

        /*called when encrypt resolved*/
        options.update = {$set: {"username": username, "password": hash, "role": role}};  /*data to write to the record*/

        if (err || !hash){
            logger.error("could not encrypt password");
            res.status(500).send(err);
        } else {
            db.users.findAndModify(options, function (err, record, lastErr) {
                if (err || !record){
                    logger.error("user " + username + " not saved");
                    res.status(500).send(err);
                } else {
                    logger.info('user upsert successful, username: ' + record.username);
                    res.header('Location', 'user/' + record._id);
                    res.status(200).send(record);
                }
            });
        }
    });
});

/**
 * Delete a user profile
 * If successful returns the number of deleted records
 *
 * Usage: user?username=someuser@smk.dk
 */
app.delete('/user', function(req, res){

    if (!req.isAuthenticated() || req.user.role != "admin"){
        res.send(401);
        return;
    };

    if(!req.query || !req.query.username){
        res.send(400);
        return;
    }
    var username = req.query.username;

    db.users.remove({"username": username}, function(err, numberRemoved){
        if (err || !numberRemoved){
            logger.error("delete failed");
            res.status(500).send(err);
        } else {
            logger.info("delete successful");
            res.status(200).send(numberRemoved);
        }
    });
});

